# Made by MisterBasic
# <!!> SPIGOT PAGE https://www.spigotmc.org/resources/authors/misterbasic.479098/ <!!>
#
# DO NOT REDISTRIBUTE WITHOUT MY PERMISSION!
#
# Dependencies:
# 	- SkUtilities
# 	- SkQuery
# 	- Skellett
#
# Last Updated: 2018-04-13
# Current amount of checks: 17
options:
	name: GoldenEyes
	version: 4.5_DEV
	description: Stop cheaters from hacking on your server!
	
	# Websites
	github: https://github.com/MisterBasic/GoldenEyes
	version-pastebin: https://api.spigotmc.org/legacy/update.php?resource=54638/
	devversion-pastebin: https://pastebin.com/raw/jbR5DcqP

	# Checks

	maxtimejoin: 30 seconds # Time between when the player joins and when the anticheat will begin alerting

	autoclicker: 15 # Maximum CPS for alert
	autoclicker-kick: 30 # Maximum CPS for kick
	reach: 4 # Maximum Reach for alert
	fastplace: 20 # Maximum Blocks placed for alert
	fastladder: 4 # Maximum CPS for alert











on enable:
	set {goldeneyes.delay} to now
	# AutoUpdater
	autoUpdateHandler()
	# Console enable message
	send "[{@name}] Enabling {@name} v{@version}" to console
	# Configuration Manager
	clear {CONFIG::*}
	if file "plugins/GoldenEyes/config.yml" exists:
		set {CONFIG::prefix} to yml value "plugin.prefix" from file "plugins/GoldenEyes/config.yml"
		set {CONFIG::debug} to yml value "plugin.debug" from file "plugins/GoldenEyes/config.yml"
		set {CONFIG::options.kick} to yml value "options.kick" from file "plugins/GoldenEyes/config.yml"
		set {CONFIG::options.actionbar} to yml value "options.actionbar" from file "plugins/GoldenEyes/config.yml"
	if file exists at "plugins/GoldenEyes/config.yml" is false:
		create file "plugins/GoldenEyes/config.yml"
	if yml path "plugin.config-version" in file "plugins/GoldenEyes/config.yml" doesn't exist:
		write "## Created by MisterBasic, Do not redistribute!!!" at line 1 to file "plugins/GoldenEyes/config.yml"
		write "## " at line 2 to file "plugins/GoldenEyes/config.yml"
		write "## {@github}" at line 3 to file "plugins/GoldenEyes/config.yml"
		write "## https://www.spigotmc.org/resources/authors/misterbasic.479098/" at line 4 to file "plugins/GoldenEyes/config.yml"
		write "## " at line 5 to file "plugins/GoldenEyes/config.yml"
		write "## This is your configuration file :D" at line 6 to file "plugins/GoldenEyes/config.yml"
		write "" at line 7 to file "plugins/GoldenEyes/config.yml"
		set yml value "plugin.prefix" from file "plugins/GoldenEyes/config.yml" to "&8[&6GoldenEyes&8]&e"
		set yml value "plugin.config-version" from file "plugins/GoldenEyes/config.yml" to 1
		set yml value "plugin.debug" from file "plugins/GoldenEyes/config.yml" to false
		set yml value "options.kick" from file "plugins/GoldenEyes/config.yml" to true
		set yml value "options.actionbar" from file "plugins/GoldenEyes/config.yml" to true
		set yml value "options.actionbar-message" from file "plugins/GoldenEyes/config.yml" to "&eThis server is protected by GoldenEyes AntiCheat"
		set {CONFIG::prefix} to yml value "plugin.prefix" from file "plugins/GoldenEyes/config.yml"
		set {CONFIG::debug} to yml value "plugin.debug" from file "plugins/GoldenEyes/config.yml"
		set {CONFIG::options.kick} to yml value "options.kick" from file "plugins/GoldenEyes/config.yml"
		set {CONFIG::actionbar} to yml value "options.actionbar" from file "plugins/GoldenEyes/config.yml"
		set {CONFIG::options.actionbar-message} to yml value "options.actionbar-message" from file "plugins/GoldenEyes/config.yml"
		# Configuration Checks (Values+Enabled)
		set yml value "checks.autoclicker.enabled" from file "plugins/GoldenEyes/config.yml" to true
		set yml value "checks.autoclicker.maxcps" from file "plugins/GoldenEyes/config.yml" to 15
		set yml value "checks.autoclicker.maxcpskick" from file "plugins/GoldenEyes/config.yml" to 30
		set yml value "checks.reach.enabled" from file "plugins/GoldenEyes/config.yml" to true # Default
		set yml value "checks.reach.maxdistance" from file "plugins/GoldenEyes/config.yml" to 4
		set yml value "checks.fastplace.enabled" from file "plugins/GoldenEyes/config.yml" to true
		set yml value "checks.fastplace.maxblocks" from file "plugins/GoldenEyes/config.yml" to 15
		set yml value "checks.fastbow.enabled" from file "plugins/GoldenEyes/config.yml" to true
		set yml value "checks.waterwalk.enabled" from file "plugins/GoldenEyes/config.yml" to true
		set yml value "checks.autosneak.enabled" from file "plugins/GoldenEyes/config.yml" to true
		set yml value "checks.liquidinteract.enabled" from file "plugins/GoldenEyes/config.yml" to true
		set yml value "checks.flight.enabled" from file "plugins/GoldenEyes/config.yml" to true
		set yml value "checks.nofall.enabled" from file "plugins/GoldenEyes/config.yml" to true
		set yml value "checks.antikb.enabled" from file "plugins/GoldenEyes/config.yml" to true
		set yml value "checks.inventorycleaner.enabled" from file "plugins/GoldenEyes/config.yml" to true
		set yml value "checks.xray.enabled" from file "plugins/GoldenEyes/config.yml" to false
		set yml value "checks.speed.enabled" from file "plugins/GoldenEyes/config.yml" to true
		set yml value "checks.badpackets.enabled" from file "plugins/GoldenEyes/config.yml" to true
		set yml value "checks.antivpn.enabled" from file "plugins/GoldenEyes/config.yml" to true
		add "ARETI-AS" to yml list "checks.antivpn.blockedhosts" from file "plugins/GoldenEyes/config.yml"
		add "EGIHostings" to yml list "checks.antivpn.blockedhosts" from file "plugins/GoldenEyes/config.yml"
		add "EGIHosting" to yml list "checks.antivpn.blockedhosts" from file "plugins/GoldenEyes/config.yml"
		add "anchorfree" to yml list "checks.antivpn.blockedhosts" from file "plugins/GoldenEyes/config.yml"
		add "Netherlands" to yml list "checks.antivpn.blockedhosts" from file "plugins/GoldenEyes/config.yml"
		add "NFORCE" to yml list "checks.antivpn.blockedhosts" from file "plugins/GoldenEyes/config.yml"
		add "Leaseweb" to yml list "checks.antivpn.blockedhosts" from file "plugins/GoldenEyes/config.yml"
		add "M247" to yml list "checks.antivpn.blockedhosts" from file "plugins/GoldenEyes/config.yml"
		add "PLI-AS" to yml list "checks.antivpn.blockedhosts" from file "plugins/GoldenEyes/config.yml"
		add "HostUS" to yml list "checks.antivpn.blockedhosts" from file "plugins/GoldenEyes/config.yml"
		add "IOMART-AS" to yml list "checks.antivpn.blockedhosts" from file "plugins/GoldenEyes/config.yml"
		add "WideOpenWest" to yml list "checks.antivpn.blockedhosts" from file "plugins/GoldenEyes/config.yml"
		add "Choopa" to yml list "checks.antivpn.blockedhosts" from file "plugins/GoldenEyes/config.yml"

		set yml value "chat-manager.enabled" from file "plugins/GoldenEyes/config.yml" to false
		add "Unicorns_and_ponies" to yml list "chat-manager.blocked-words" from file "plugins/GoldenEyes/config.yml"
	if dir "plugins/GoldenEyes/addons" doesn't exist:
		create directory "plugins/GoldenEyes/addons"
	updatePluginData()
on disable:
	send "[{@name}] Disabling {@name} v{@version}" to console
on first join:
	set {goldeneyes.timeonline.%player%} to now
	registerViolationsHandler(player)
	updatePlayerData(player)
on join:
	player has played before
	if player has permission "goldeneyes.joinmessage":
		gecmd("version", player)
	if player has permission "goldeneyes.silentjoin":
		set join message to ""
	set {goldeneyes.timeonline.%player%} to now
	registerViolationsHandler(player)
	updatePlayerData(player)
	add player to {goldeneyes.antibot.%ip of player%::*}
on quit:
	if player has permission "goldeneyes.silentjoin":
		set quit message to ""
	remove player from {goldeneyes.antibot.%ip of player%::*}
on connect:
	loop {goldeneyes.antibot.%ip of player%::*}:
		add 1 to {_accs}
	if {_accs} >= 5:
		gekick("Too many connected accounts!", player)
	if yml value "checks.antivpn.enabled" from file "plugins/GoldenEyes/config.yml" is true:
		antiVPNHandler(player)
on Skript stop:
	loop all players:
		clear {goldeneyes.antibot.%ip of loop-player%::*}
on disconnect:
	clear {goldeneyes.updatetool.%player%}
	clear {goldeneyes.lastfood.%player%}
	clear {goldeneyes.lastfoodb.%player%}
	clear {goldeneyes.timeonline.%player%}
	clear {goldeneyes.lastclick.%player%}
	clear {goldeneyes.updatetool.%player%}
	clear {goldeneyes.cps::%player%}
	clear {goldeneyes.lastshot.%player%}
	clear {goldeneyes.changedtool.%player%}
	clear {goldeneyes.lastdrop.%player%}
	clear {goldeneyes.diamondsmined.%player%}
	clear {goldeneyes.goldmined.%player%}
	clear {goldeneyes.ironmined.%player%}
	clear {goldeneyes.lastplace.%player%}
	clear {goldeneyes.move.%player%}
	clear {goldeneyes.waterwalk.%player%}
	clear {goldeneyes.antikb.%player%}
	clear {goldeneyes.nuker.%player%}
	clear {goldeneyes.packets.%player%}
	clear {goldeneyes.lastpacket.%player%}
	clear {goldeneyes.flight.%player%}
	clear {goldeneyes.nofall.%player%}
on respawn:
	set {goldeneyes.timeonline.%player%} to now



every 2 minutes:
	{CONFIG::options.actionbar} is true
	send an actionbar with "&8[&c!&8]&f %{CONFIG::options.actionbar-message}% &8[&c!&8]&e" to all players # From Skellett

# [----------------] #
# [   Self Damage  ] #
# [----------------] #

on damage:
	if attacker is victim:
		gekick("Self Damage", attacker)

# [----------------] #
# [   AutoClicker  ] #
# [----------------] #

on left click:
	if {CONFIG::.checks.autoclicker.enabled} is true:
		#player does not have permission "goldeneyes.autoclicker.bypass"
		if difference between {goldeneyes.lastclick.%player%} and now < 2 ticks:
			add 1 to {CONFIG::violations.%uuid of player%.autoclicker}
			alert("%player% failed FastClick [VL %{CONFIG::violations.%uuid of player%.autoclicker}%]", player)
			updatePlayerData(player)

# [----------------] #
# [    Killaura    ] #
# [----------------] #
	if clicked entity is set:
		add 1 to {goldeneyes.accuracy.%player%}
	else:
		clear {goldeneyes.accuracy.%player%}
	if {goldeneyes.accuracy.%player%} > 30:
		alert("%player% failed KillAura", player)
	if difference between {goldeneyes.lastclick.%player%} and now > 1 second:
		clear {goldeneyes.accuracy.%player%}
		
		
		
	set {goldeneyes.lastclick.%player%} to now
every second:
	clear {goldeneyes.fastplace::*}
# [----------------] #
# [    FastBow     ] #
# [----------------] #

on shoot:
	{CONFIG::checks.fastbow.enabled} is true
	shooter does not have permission "goldeneyes.fastbow.bypass"
	projectile is an arrow
	if {goldeneyes.lastshot.%shooter%} was less than 2 ticks ago:
		set {goldeneyes.lastshot.%shooter%} to now
		add 1 to {CONFIG::violations.%uuid of shooter%.fastbow}
		alert("%shooter% failed FastBow [VL {CONFIG::violations.%uuid of shooter%.fastbow}]", shooter)
		stop
	set {goldeneyes.lastshot.%shooter%} to now

# [----------------] #
# [InventoryCleaner] #
# [----------------] #
on drop:
	yml value "checks.inventorycleaner.enabled" from file "plugins/GoldenEyes/config.yml" is true
	add 1 to {goldeneyes.drops.%player%}
	if {goldeneyes.drops.%player%} > 5:
		if difference between {goldeneyes.lastdrop.%player%} and now < 1 ticks:
			cancel event
			alert("%player% failed InventoryCleaner", player)
	set {goldeneyes.lastdrop.%player%} to now
# [----------------] #
# [      Reach     ] #
# [----------------] #
on damage:
	{CONFIG::checks.reach.enabled} is true
	attacker is a player
	#attacker does not have permission "goldeneyes.reach.bypass"
	attacker's gamemode is survival or adventure
	damage cause is not a projectile, potion, thorns or explosion
	if distance between attacker and victim > {@reach}:
		add 1 to {CONFIG::violations.%uuid of attacker%.reach}
		add 1 to {goldeneyes.reach.%attacker%}
		alert("%attacker% failed Reach [VL %{CONFIG::violations.%uuid of attacker%.reach}%]", attacker)
		updatePlayerData(attacker)
on place:
	if {CONFIG::checks.reach.enabled} is true:
		player does not have permission "goldeneyes.reach.bypass"
		player's gamemode is not creative
		if distance between event-block and player is greater than 5:
			gekick("Reach", player)
# [----------------] #
# [   FastPlace    ] #
# [----------------] #
	if {CONFIG::checks.fastplace.enabled} is true:
		player does not have permission "goldeneyes.fastplace.bypass"
		if {goldeneyes.lastplace.%player%} is not set:
			set {goldeneyes.lastplace.%player%} to now
			stop
		if difference between {goldeneyes.lastplace.%player%} and now < 0.9 ticks:
			cancel event
			add 1 to {CONFIG::violations.%uuid of player%.fastplace}
			alert("%player% failed FastPlace [VL %{CONFIG::violations.%uuid of player%.fastplace}%]", player)
			clear {goldeneyes.lastplace.%player%}
			stop
# [----------------] #
# [   AutoSneak    ] #
# [----------------] #

on chat:
	player is sneaking
	{CONFIG::checks.autosneak.enabled} is true
	player does not have permission "goldeneyes.autosneak.bypass"
	add 1 to {CONFIG::violations.%uuid of player%.autosneak}
	alert("%player% failed AutoSneak (Chat_MESSAGE) [VL %{CONFIG::violations.%uuid of player%.autosneak}%]", player)
on sign edit:
	player is sneaking
	{CONFIG::checks.autosneak.enabled} is true
	player does not have permission "goldeneyes.autosneak.bypass"
	add 1 to {CONFIG::violations.%uuid of player%.autosneak}
	alert("%player% failed AutoSneak (Sign_EDIT) [VL %{CONFIG::violations.%uuid of player%.autosneak}%]", player)
on command:
	player is sneaking
	{CONFIG::checks.autosneak.enabled} is true
	player does not have permission "goldeneyes.autosneak.bypass"
	add 1 to {CONFIG::violations.%uuid of player%.autosneak}
	alert("%player% failed AutoSneak (Chat_COMMAND) [VL %{CONFIG::violations.%uuid of player%.autosneak}%]", player)
on inventory close:
	# Little extra
	clear {menu.%player%}
	player is sneaking
	if {CONFIG::checks.autosneak.enabled} is true:
		player does not have permission "goldeneyes.autosneak.bypass"
		add 1 to {CONFIG::violations.%uuid of player%.autosneak}
		log "%player% failed AutoSneak {Closed inventory while sneaking} [Ping: %player's ping%, IP: %player's ip%]" to "GoldenEyes/checks.log"
		alert("%player% failed AutoSneak (Inventory_CLOSE) [VL %{CONFIG::violations.%uuid of player%.autosneak}%]", player)
		
on inventory click:
	player is sneaking
	if {CONFIG::checks.autosneak.enabled} is true:
		player does not have permission "goldeneyes.autosneak.bypass"
		add 1 to {CONFIG::violations.%uuid of player%.autosneak}
		log "%player% failed AutoSneak {Clicked in inventory while sneaking} [Ping: %player's ping%, IP: %player's ip%]" to "GoldenEyes/checks.log"
		alert("%player% failed AutoSneak (Inventory_CLICK) [VL %{CONFIG::violations.%uuid of player%.autosneak}%]", player)
on inventory open:
	player is sneaking
	if {CONFIG::checks.autosneak.enabled} is true:
		player does not have permission "goldeneyes.autosneak.bypass"
		add 1 to {CONFIG::violations.%uuid of player%.autosneak}
		log "%player% failed AutoSneak {Opened inventory while sneaking} [Ping: %player's ping%, IP: %player's ip%]" to "GoldenEyes/checks.log"
		alert("%player% failed AutoSneak (Inventory_OPEN) [VL %{CONFIG::violations.%uuid of player%.autosneak}%]", player)
on sprint toggle:
	player is sneaking
	if player is on ground:
		if {CONFIG::checks.autosneak.enabled} is true:
			player does not have permission "goldeneyes.autosneak.bypass"
			add 1 to {CONFIG::violations.%uuid of player%.autosneak}
			log "%player% failed AutoSneak {Toggled sprint whilst sneaking} [Ping: %player's ping%, IP: %player's ip%]" to "GoldenEyes/checks.log"
			alert("%player% failed AutoSneak (Sprint_TOGGLE) [VL %{CONFIG::violations.%uuid of player%.autosneak}%]", player)
# X-ray Vision [WARNING: This version of detection is still in development stages. I would advise NOT using this check.]
on mine:
	{CONFIG::checks.xray.enabled} is true
	player's gamemode is survival
	player does not have permission "goldeneyes.xray.bypass"
# Diamond Ore
	if event-block is diamond ore:
		add 1 to {goldeneyes.diamondsmined.%player%}
		if {goldeneyes.diamondsmined.%player%} is greater than 20:
			add 1 to {CONFIG::violations.%player%.xray}
			updatePlayerData(player)
			alert("%player% might be using Xray! [Diamonds Mined: %{goldeneyes.diamondsmined.%player%}%]", player)
			clear {goldeneyes.diamondsmined.%player%}
# Gold Ore
	if event-block is gold ore:
		add 1 to {goldeneyes.goldmined.%player%}
		if {goldeneyes.goldmined.%player%} is greater than 20:
			add 1 to {CONFIG::violations.%player%.xray}
			updatePlayerData(player)
			alert("%player% might be using Xray! [Gold Mined: %{goldeneyes.goldminded.%player%}%]", player)
			clear {goldeneyes.goldmined.%player%}
# Iron ore
	if event-block is iron ore:
		add 1 to {goldeneyes.ironmined.%player%}
		if {goldeneyes.ironmined.%player%} is greater than 30:
			add 1 to {CONFIG::violations.%player%.xray}
			updatePlayerData(player)
			alert("%player% might be using Xray! [Iron Mined: %{goldeneyes.ironmined.%player%}%]", player)
			clear {goldeneyes.ironmined.%player%}
		
every 10 minutes:
	loop all players:
		clear {goldeneyes.ironmined.%loop-player%}
		clear {goldeneyes.goldmined.%loop-player%}
		clear {goldeneyes.diamondsmined.%loop-player%}
		clear {goldeneyes.move.%loop-player%}
		clear {goldeneyes.waterwalk.%loop-player%}
		clear {goldeneyes.antikb.%loop-player%}
		clear {goldeneyes.tmessages.%loop-player%}
		clear {goldeneyes.nuker.%loop-player%}
		clear {goldeneyes.packets.%loop-player%}
		clear {goldeneyes.lastpacket.%loop-player%}

# [----------------] #
# [   WaterWalk    ] #
# [----------------] #

on walk on water:
	{CONFIG::checks.waterwalk.enabled} is true
	set {_loc} to location of player
	player does not have permission "goldeneyes.waterwalk.bypass"
	set {_lilypad} to 0
	player is not flying
	loop all blocks in radius 1 around player:
		if loop-block is a lily pad:
			add 1 to {_lilypad}
	if {_lilypad} > 1:
		stop
	else if block below the player is water or lava:
		if block left of block below the player is water or lava:
			if block right of block below the player is water or lava:
				if block behind the block below the player is water or lava:
					if block infront of block below the player is water or lava:
						if block at player is not water:
							if block above player is not water:
								player is on ground
								cancel event
								teleport the player to {_loc}
								add 1 to {CONFIG::violations.%uuid of player%.waterwalk}
								add 1 to {goldeneyes.waterwalk.%player%}
								alert("%player% failed WaterWalk [VL %{CONFIG::violations.%uuid of player%.waterwalk}%]", player)
								push player down at speed 2
								if {goldeneyes.waterwalk.%player%} is greater than 20:
									clear {goldeneyes.waterwalk.%player%}
									gekick("WaterWalk", player)

# [----------------] #
# [ LiquidInteract ] #
# [----------------] #

on right click on water or lava:
	yml value "checks.liquidinteract.enabled" from file "plugins/GoldenEyes/config.yml" is true
	player does not have permission "goldeneyes.liquidinteract.bypass"
	cancel event
	gekick("LiquidInteract", player)
on left click on water or lava:
	yml value "checks.liquidinteract.enabled" from file "plugins/GoldenEyes/config.yml" is true
	player does not have permission "goldeneyes.liquidinteract.bypass"
	cancel event
	gekick("LiquidInteract", player)
# [----------------] #
# [     NoFall     ] #
# [----------------] #

on any movement:
	{CONFIG::checks.nofall.enabled} is true
	player is not flying
	player is not riding
	player is on ground
	set {_loc} to location of player
	loop all blocks in radius 2 of the player:
		if loop-block is not air:
			add 1 to {_solidblocks}
	{_solidblocks} < 1
	player's gamemode is not Creative or Spectator:
		add 1 to {goldeneyes.nofall.%player%}
		add 1 to {CONFIG::violations.%uuid of player%.nofall}
		alert("%player% failed NoFall [VL %{CONFIG::violations.%uuid of player%.nofall}%]", player)
		updatePlayerData(player)
		if {goldeneyes.nofall.%player%} > 20:
			gekick("AntiFallDamage", player)
			clear {goldeneyes.nofall.%player%}

			

# [----------------] #
# [     AntiKB     ] #
# [----------------] #

on damage of player:	
	{CONFIG::checks.antikb.enabled} is true
	if damage cause is fall, fire, thorns or potion:
		stop
	else:
		set {_loc1} to location of victim
		wait 4 ticks
		victim is not riding
		victim is not flying
		block west of victim is air
		block east of victim is air
		block north of victim is air
		block south the victim is air
		block west of the block above the victim is air
		block east of the block above the victim is air
		block north of the block above the victim is air
		block south of the block above the victim is air
		block below the victim is not water or lava

		if block at victim is not cobweb:
			if victim's gamemode is not Creative or Spectator:
				if distance between {_loc1} and victim < 0.1:
					if victim's ping is less than 260:
						add 1 to {CONFIG::violations.%uuid of victim%.antikb}
						add 1 to {goldeneyes.antikb.%victim%}
						push the victim upwards at speed 3
						alert("%victim% failed AntiKnockBack [VL %{CONFIG::violations.%uuid of victim%.antikb}%]", victim)
						if {goldeneyes.antikb.%victim%} >= 20:
							clear {goldeneyes.antikb.%victim%}
							gekick("AntiKnockback", victim)
# [----------------] #
# [     Packets    ] #
# [----------------] #

# Check movement packets sent in 1 second
on packet recieve:
	{CONFIG::checks.badpackets.enabled} is true
	event-string is "PacketPlayInPosition"
	add 1 to {goldeneyes.packets.%player%}
	event-location is event-player's location
	if {goldeneyes.packets.%player%} > 24:
		alert("%player% failed Bad Packets %difference between {goldeneyes.lastpacket.%player%} and now%, %{goldeneyes.packets.%player%}%", player)
		clear {goldeneyes.packets.%player%}
	set {goldeneyes.lastpacket.%player%} to now
	set {goldeneyes.packetloc.%player%} to event-player's location
every 1 second:
	loop all players:
		clear {goldeneyes.packets.%loop-player%}
# [----------------] #
# [      Nuker     ] #
# [----------------] #

on block break:
	if difference between {goldeneyes.lastnuker.%player%} and now < 0.2 second:
		if {goldeneyes.nuker.%player%} > 30:
			alert("%player% failed Nuker", player)
			clear {goldeneyes.nuker.%player%}
			clear {goldeneyes.lastnuker.%player%}
		else:
			if tool of the player is enchanted with efficiency 1:
				stop
			if tool of the player is enchanted with efficiency 2:
				stop
			add 1 to {goldeneyes.nuker.%player%}
	else:
		clear {goldeneyes.nuker.%player%}
	set {goldeneyes.lastnuker.%player%} to now

# [----------------] #
# [      Speed     ] #
# [----------------] #

on any movement:
	{CONFIG::checks.speed.enabled} is true
	{teleporting.%player%} is false
	player is not flying
	player is not riding
	player's ping is less than 350
	block 2 below the player is not ice, air, water or lava
	player's gamemode is survival or adventure
	if distance between {goldeneyes.speedlocation.%player%} and player >= 3:
		set {goldeneyes.walkspeed.%player%} to difference between {goldeneyes.lastspeedcheck.%player%} and now
		if player doesn't have speed:
			if {goldeneyes.walkspeed.%player%} < 0.30 seconds:
				add 1 to {CONFIG::violations.%uuid of player%.speed}
				push player down at speed 1
				alert("%player% failed Speed [VL %{CONFIG::violations.%uuid of player%.speed}%]", player)
				teleport player to {goldeneyes.speedlocation.%player%}
				updatePlayerData(player)
			if {goldeneyes.walkspeed.%player%} < 0.1 seconds:
				player's ping is less than 100
				gekick("Speed", player)
		else:
			stop
		set {goldeneyes.speedlocation.%player%} to location of player
		set {goldeneyes.lastspeedcheck.%player%} to now
	if {goldeneyes.speedlocation.%player%} is not set:
		set {goldeneyes.speedlocation.%player%} to location of player
		set {goldeneyes.lastspeedcheck.%player%} to now
on teleport:
	set {teleporting.%player%} to true
	wait 1 second
	set {teleporting.%player%} to false

# [----------------] #
# [   ChatManager  ] #
# [----------------] #
on chat:
	# Chat mutes
	if chatIsMuted():
		cancel event
		send "&cChat has been muted by an Administrator! Reason: %getChatMuteReason()%"
	if message contains yml list "chat-manager.blocked-words" from file "plugins/GoldenEyes/config.yml":
		cancel event
		send "&4Your message was blocked!"
# [----------------] #
# [Command  Handler] #
# [----------------] #

on command "/goldeneyes":
	if player does not have permission "goldeneyes.command":
		cancel event
		send "§6%sender% tried to use ""/%full command%"", but doesn't have permission." to console
		send "&cYou do not have permission to execute this command!" to player
command /chatmanager [<text>] [<text>] [<text>]:
	aliases: /chat-manager, /cm
	trigger:
		if arg 1 is "mutechat":
			if chatIsMuted():
				unmuteChat()
				send "%{CONFIG::prefix}% You successfully unmuted the chat!" to sender
				stop
			else:
				if arg 2 is set:
					if arg 3 is set:
						set {_reason} to "%arg 2% %arg 3%"
					else:
						set {_reason} to "%arg 2%"
					muteChat({_reason})
					send "%{CONFIG::prefix}% You successfully muted the chat!" to sender
					stop
				else:
					send "%{CONFIG::prefix}% &cUsage: /chat-manager %arg 1% <reason...>" to sender
					stop
		if arg 1 is "clear":
			loop 300 times:
				broadcast " "
			if arg 3 does not contain "-s":
				broadcast "&9Chat was cleared by %player%."
			else:
				broadcast "&9Chat was cleared."
command /ping [<text>]: 
	trigger:
		if player has permission "goldeneyes.ping":
			if player does not have permission "goldeneyes.ping.other":
				send "&6Ping&e: %player's ping%" to player
			else:
				if arg 1 is not set:
					send "&6Ping&e: %player's ping%" to player
				else:
					send "&6%arg 1%'s Ping&e: %ping of arg 1 parsed as player%" to player
		else:
			send "&cInsufficent Permission." to player
command /goldeneyesconsole [<text>]:
	aliases: /gec, /goldeneyesc
	trigger:
		if sender is console:
			make console execute "/goldeneyes console %arg 1%"
		else:
			send "&4You may not execute this command!" to sender
		stop
command /goldeneyesreport [<player>] [<text>]:
	aliases: ger, gereport
	executable by: players and console
	permission: goldeneyes.report
	permission message: &cInsufficent Permission.
	trigger:
		if sender is console:
			send "<red>You may not use this command!" to console
			stop
		else:
			if arg 1 is set:
				if arg 2 is set:
					if file "plugins/GoldenEyes/playerreports.yml" does not exist:
						create file "plugins/GoldenEyes/playerreports.yml"
					set yml value "reports.%uuid of arg 1%.%sender%.reason" from file "plugins/GoldenEyes/playerreports.yml" to arg 2
					set yml value "reports.%uuid of arg 1%.name" from file "plugins/GoldenEyes/playerreports.yml" to arg 1
					send "&eSuccessfully reported %arg 1% for &c%arg 2%&e!" to sender
					staffMsg("&6%sender% reported %arg 1% for&c %arg 2%", "/tp %arg 1%")
command /goldeneyes [<text>] [<text>] [<text>]:
	aliases: ge, gec
	executable by: players and console
	permission: goldeneyes.maincommand
	permission message: &cInsufficent Permission.
	trigger:
		if arg 1 is not set:
			gecmd("version", sender)
		else if arg 1 is "checks":
			gecmd("checks", sender)
		else if arg 1 is "reload":
			if arg 2 is not set:
				gecmd("reload", sender)
			else if arg 2 is "config":
				gecmd("reload-config", sender)
		else if arg 1 is "version":
			gecmd("version", sender)
		else if arg 1 is "help":
			gecmd("help", sender)
		else if arg 1 is "mutechat":
			execute player command "/chat mutechat %arg 2%"
		else if arg 1 is "notify":
			if arg 2 is "true" or "on":
				gecmd("notify-true", sender)
				stop
			if arg 2 is "false" or "off":
				gecmd("notify-false", sender)
				stop
			else:
				send "%{CONFIG::prefix}% &cPlease specify a boolean: /goldeneyes notify &4<true|false>&c!" to sender
				stop
		else if arg 1 is "reset":
			arg 2 is set
			if arg 3 contains "autoclicker":
				clear {CONFIG::violations.%uuid of arg 2 parsed as player%.autoclicker}
				send "%{CONFIG::prefix}% Reset all of %arg 2%'s violations for AutoClicker!" to sender
			if arg 3 contains "fastplace":
				clear {CONFIG::violations.%uuid of arg 2 parsed as player%.fastplace}
				send "%{CONFIG::prefix}% Reset all of %arg 2%'s violations for Fastplace!" to sender
			if arg 3 contains "fastbreak" or "nuker":
				clear {CONFIG::violations.%uuid of arg 2 parsed as player%.nuker}
				send "%{CONFIG::prefix}% Reset all of %arg 2%'s violations for Nuker!" to sender
			if arg 3 contains "liquidinteract":
				clear {CONFIG::violations.%uuid of arg 2 parsed as player%.liquidinteract}
				send "%{CONFIG::prefix}% Reset all of %arg 2%'s violations for LiquidInteract!" to sender
			if arg 3 contains "waterwalk":
				clear {CONFIG::violations.%uuid of arg 2 parsed as player%.waterwalk}
				send "%{CONFIG::prefix}% Reset all of %arg 2%'s violations for WaterWalk!" to sender
			if arg 3 contains "autosneak":
				clear {CONFIG::violations.%uuid of arg 2 parsed as player%.autosneak}
				send "%{CONFIG::prefix}% Reset all of %arg 2%'s violations for AutoSneak!" to sender
			if arg 3 contains "reach":
				clear {CONFIG::violations.%uuid of arg 2 parsed as player%.fastbow}
				send "%{CONFIG::prefix}% Reset all of %arg 2%'s violations for Reach!" to sender
			if arg 3 contains "flight":
				clear {CONFIG::violations.%uuid of arg 2 parsed as player%.flight}
				send "%{CONFIG::prefix}% Reset all of %arg 2%'s violations for Flight!" to sender
			if arg 3 contains "antikb" or "antiknockback":
				clear {CONFIG::violations.%uuid of arg 2 parsed as player%.antikb}
				send "%{CONFIG::prefix}% Reset all of %arg 2%'s violations for AntiKnockback!" to sender
			if arg 3 contains "fastbow":
				clear {CONFIG::violations.%uuid of arg 2 parsed as player%.fastbow}
				send "%{CONFIG::prefix}% Reset all of %arg 2%'s violations for FastBow!" to sender
			if arg 3 contains "fastmove" or "speed":
				clear {CONFIG::violations.%uuid of arg 2 parsed as player%.speed}
				send "%{CONFIG::prefix}% Reset all of %arg 2%'s violations for Speed!" to sender
			if arg 3 contains "fastladder" or "speedladder":
				clear {CONFIG::violations.%uuid of arg 2 parsed as player%.fastladder}
				send "%{CONFIG::prefix}% Reset all of %arg 2%'s violations for FastLadder! <tooltip:&cThis is no longer in use.>&c&l(Deprecated)" to sender
			if arg 3 contains "*" or "all":
				send "%{CONFIG::prefix}% Reset all of %arg 2%'s violations!" to sender
			else if arg 3 is not set:
				send "%{CONFIG::prefix}% Please use ""/goldeneyes reset %arg 2% <violations>""" to sender
			updatePlayerData(arg 2 parsed as player)
			stop
		else if arg 1 is "info":
			if arg 2 is set:
				open chest with 4 rows named "&6&n&lGoldenEyes Player Info" to sender
				if {CONFIG::violations.%uuid of arg 2 parsed as player%.reach} is not set:
					set {CONFIG::violations.%uuid of arg 2 parsed as player%.reach} to 0
				if {CONFIG::violations.%uuid of arg 2 parsed as player%.flight} is not set:
					set {CONFIG::violations.%uuid of arg 2 parsed as player%.flight} to 0
				if {CONFIG::violations.%uuid of arg 2 parsed as player%.autosneak} is not set:
					set {CONFIG::violations.%uuid of arg 2 parsed as player%.autosneak} to 0
				if {CONFIG::violations.%uuid of arg 2 parsed as player%.waterwalk} is not set:
					set {CONFIG::violations.%uuid of arg 2 parsed as player%.waterwalk} to 0
				if {CONFIG::violations.%uuid of arg 2 parsed as player%.liquidinteract} is not set:
					set {CONFIG::violations.%uuid of arg 2 parsed as player%.liquidinteract} to 0
				if {CONFIG::violations.%uuid of arg 2 parsed as player%.fastplace} is not set:
					set {CONFIG::violations.%uuid of arg 2 parsed as player%.fastplace} to 0
				if {CONFIG::violations.%uuid of arg 2 parsed as player%.autoclicker} is not set:
					set {CONFIG::violations.%uuid of arg 2 parsed as player%.autoclicker} to 0
				if {CONFIG::violations.%uuid of arg 2 parsed as player%.fastbow} is not set:
					set {CONFIG::violations.%uuid of arg 2 parsed as player%.fastbow} to 0
				if {CONFIG::violations.%uuid of arg 2 parsed as player%.speed} is not set:
					set {CONFIG::violations.%uuid of arg 2 parsed as player%.speed} to 0
				if {CONFIG::violations.%uuid of arg 2 parsed as player%.nuker} is not set:
					set {CONFIG::violations.%uuid of arg 2 parsed as player%.nuker} to 0
				if {CONFIG::violations.%uuid of arg 2 parsed as player%.antikb} is not set:
					set {CONFIG::violations.%uuid of arg 2 parsed as player%.antikb} to 0
				
				
				format slot 4 of player with player head named "&6%arg 2%" with lore "&7Name: %display name of arg 2 parsed as player%||&7UUID: %uuid of arg 2 parsed as player%||&7IP: %ip of arg 2 parsed as player%" to be unstealable
				format slot 9 of player with red stained glass named "&4Reach/Killaura (%{CONFIG::violations.%uuid of arg 2 parsed as player%.reach}%)" with lore "&c&lClick to reset violations" to run [make player execute "/goldeneyes reset %arg 2% Reach"]
				format slot 10 of player with red stained glass named "&4WaterWalk (%{CONFIG::violations.%uuid of arg 2 parsed as player%.waterwalk}%)" with lore "&c&lClick to reset violations" to run [make player execute "/goldeneyes reset %arg 2% WaterWalk"]
				format slot 11 of player with red stained glass named "&4AntiKB (%{CONFIG::violations.%uuid of arg 2 parsed as player%.antikb}%)" with lore "&c&lClick to reset violations" to run [make player execute "/goldeneyes reset %arg 2% AntiKB"]
				format slot 12 of player with red stained glass named "&4AutoSneak (%{CONFIG::violations.%uuid of arg 2 parsed as player%.autosneak}%)" with lore "&c&lClick to reset violations" to run [make player execute "/goldeneyes reset %arg 2% AutoSneak"]
				format slot 13 of player with red stained glass named "&4FastPlace/Scaffold (%{CONFIG::violations.%uuid of arg 2 parsed as player%.fastplace}%)" with lore "&c&lClick to reset violations" to run [make player execute "/goldeneyes reset %arg 2% FastPlace"]
				format slot 14 of player with red stained glass named "&4LiquidInteract (%{CONFIG::violations.%uuid of arg 2 parsed as player%.liquidinteract}%)" with lore "&c&lClick to reset violations" to run [make player execute "/goldeneyes reset %arg 2% LiquidInteract"]
				format slot 15 of player with red stained glass named "&4Flight (%{CONFIG::violations.%uuid of arg 2 parsed as player%.flight}%)" with lore "&c&lClick to reset violations" to run [make player execute "/goldeneyes reset %arg 2% Flight"]
				format slot 16 of player with red stained glass named "&4Fastbow (%{CONFIG::violations.%uuid of arg 2 parsed as player%.fastbow}%)" with lore "&c&lClick to reset violations" to run [make player execute "/goldeneyes reset %arg 2% FastBow"]
				format slot 17 of player with red stained glass named "&4AutoClicker (%{CONFIG::violations.%uuid of arg 2 parsed as player%.autoclicker}%)" with lore "&c&lClick to reset violations" to run [make player execute "/goldeneyes reset %arg 2% AutoClicker"]
				format slot 18 of player with red stained glass named "&4Speed (%{CONFIG::violations.%uuid of arg 2 parsed as player%.speed}%)" with lore "&c&lClick to reset violations" to run [make player execute "/goldeneyes reset %arg 2% Speed"]
				format slot 19 of player with red stained glass named "&4Nuker (%{CONFIG::violations.%uuid of arg 2 parsed as player%.nuker}%)" with lore "&c&lClick to reset violations" to run [make player execute "/goldeneyes reset %arg 2% Nuker"]
				format slot 20 of player with red stained glass named "&4AntiKnockback (%{CONFIG::violations.%uuid of arg 2 parsed as player%.antikb}%)" with lore "&c&lClick to reset violations" to run [make player execute "/goldeneyes reset %arg 2% Antikb"]
				set {menu.%player%} to true
				stop
		else if arg 1 is "console" or "c":
			if sender is console:
				if arg 2 is "version":
					send "&8[&6GoldenEyesAntiCheat&8]&e Running {@name} v{@version}!" to sender
				if arg 2 is "reload" or "rl":
					make console execute "/sk reload %script name%.sk"
					send "&8[&6GoldenEyesAntiCheat&8]&e Fully reloaded {@name} v{@version}!" to sender
				if arg 2 is "github" or "git" or "snapshots":
					send "&8-=-=-=-=-=-=-=-=-=-=-" to console
					send "&6You can get snapshots at:" to console
					send "&e{@github}" to console
					send "&8-=-=-=-=-=-=-=-=-=-=-" to console
				if arg 2 is "addons" or "mods":
					send "[{@name}] Addons:" to console
					loop getAddons():
						if getAddons() is not set:
							send "§4[Error]§c None found." to console
							stop
						else:
							send "§a[Addon]§7 %loop-value%" to console
				if arg 2 is "loadaddon":
					if file "plugins/Skript/scripts/GoldenEyesAPI.sk" does not exist:
						send "&cYou require &8[&4GoldenEyesAPI&8]&c to use addons!&r" to sender
						stop
					loadAddon(arg 3)
					send "§a[Addon]§7 Loaded ""addons/%arg 3%""" to console
				if arg 2 is "unloadaddon":
					unloadAddon(arg 3)
					if file "plugins/Skript/scripts/GoldenEyesAPI.sk" does not exist:
						send "&cYou require &8[&4GoldenEyesAPI&8]&c to use addons!&r" to sender
						stop
					send "§a[Addon]§7 Loaded ""addons/%arg 3%""" to console
				if arg 2 is "about":
					send "§6Name§e:&f {@name}" to console
					send "&6Author§e:&f MisterBasic" to console
					send "&6Version§e:&f {@version}" to console
					send "&6Description§e:&f {@description}" to console
				if arg 2 is "help" or "h" or "?":
					send "[!] goldeneyes c(onsole) version: Diplays version" to console
					send "[!] goldeneyes c(onsole) reload: Reload Everything" to console
					send "[!] goldeneyes c(onsole) git(hub): Displays Snapshot info" to console
					send "[!] goldeneyes c(onsole) addons: List Addons" to console
					send "[!] goldeneyes c(onsole) loadaddon: Load an addon" to console
					send "[!] goldeneyes c(onsole) unloadaddon: Unload an addon" to console
					send "[!] goldeneyes c(onsole) about: Diplays information" to console
					send "[!] goldeneyes c(onsole) help: Diplays Help" to console
		else if arg 1 is "git","github", "snapshots" or "dev":
			sender is not console
			send "&8-=-=-=-=-=-=-=-=-=-=-" to sender
			send "%nl%&6You can get snapshots at:" to sender
			send "&e<link:{@github}><tooltip:&c&n&lClick here to get snapshots>{@github} %nl%"
			send "&8-=-=-=-=-=-=-=-=-=-=-" to sender
			stop
		else if arg 1 is "about":
			gecmd("about", player)
		else if arg 1 is "teleport":
			if arg 2 is set:
				teleport sender to arg 2 parsed as player
				send "&6Teleported to %arg 2%"
		else if arg 1 is "addons" or "mods":
			if arg 2 is not set:
				gecmd("addons", sender)
			else:
				if arg 2 is "load":
					if file "plugins/Skript/scripts/GoldenEyesAPI.sk" does not exist:
						send "&cYou require &8[&4GoldenEyesAPI&8]&c to use addons!&r" to sender
						stop
					loadAddon(arg 3)
					send "%{CONFIG::prefix}% Successfully loaded &6'&eaddons/%arg 3%&6'&r" to sender
				if arg 2 is "unload":
					if file "plugins/Skript/scripts/GoldenEyesAPI.sk" does not exist:
						send "&cYou require &8[&4<tooltip:&4Click here to download it!><link:{@github}/releases/download/1.0>GoldenEyesAPI&<dark gray>]&c to use addons!&r" to sender
						stop
					unloadAddon(arg 3)
					send "%{CONFIG::prefix}% Successfully unloaded &6'&eaddons/%arg 3%&6'&r" to sender
		else:
			gecmd("unknowncmd", player)
function gecmd(t: text, p: player):
	if {_t} is "version":
		send "%{CONFIG::prefix}% Running Version {@version} by MisterBasic" to {_p}
	if {_t} is "checks":
		send "%{CONFIG::prefix}% Avaliable Checks:%nl%AutoClicker, Reach, FastBow, FastPlace, WaterWalk, LiquidInteract, AutoSneak, Flight, AntiKB, BadPackets, Speed and Nuker" to {_p}
	if {_t} is "reload":
		make console execute "/sk reload %script name%.sk"
		send "%{CONFIG::prefix}% Fully reloaded {@name} v{@version}!" to {_p}
	if {_t} is "reload-config":
		clear {CONFIG::*}
		set {CONFIG::prefix} to yml value "plugin.prefix" from file "plugins/GoldenEyes/config.yml"
		set {CONFIG::debug} to yml value "plugin.debug" from file "plugins/GoldenEyes/config.yml"
		set {CONFIG::options.kick} to yml value "options.kick" from file "plugins/GoldenEyes/config.yml"
		set {CONFIG::options.actionbar} to yml value "options.actionbar" from file "plugins/GoldenEyes/config.yml"
		if yml value "plugin.prefix" from file "plugins/GoldenEyes/config.yml" is not set:
			set yml value "plugin.prefix" from file "plugins/GoldenEyes/config.yml" to "&8[&6GoldenEyes&8]&e"
			set yml value "plugin.debug" from file "plugins/GoldenEyes/config.yml" to false
			set yml value "options.kick" from file "plugins/GoldenEyes/config.yml" to true
			set yml value "options.actionbar" from file "plugins/GoldenEyes/config.yml" to true
			set {CONFIG::prefix} to yml value "plugin.prefix" from file "plugins/GoldenEyes/config.yml"
			set {CONFIG::debug} to yml value "plugin.debug" from file "plugins/GoldenEyes/config.yml"
			set {CONFIG::options.kick} to yml value "options.kick" from file "plugins/GoldenEyes/config.yml"
			# Configuration Checks (Values+Enabled)
			set yml value "checks.autoclicker.enabled" from file "plugins/GoldenEyes/config.yml" to true
			set yml value "checks.autoclicker.maxcps" from file "plugins/GoldenEyes/config.yml" to 15
			set yml value "checks.autoclicker.maxcpskick" from file "plugins/GoldenEyes/config.yml" to 30
			set yml value "checks.reach.enabled" from file "plugins/GoldenEyes/config.yml" to true # Default
			set yml value "checks.reach.maxdistance" from file "plugins/GoldenEyes/config.yml" to 4
			set yml value "checks.fastplace.enabled" from file "plugins/GoldenEyes/config.yml" to true
			set yml value "checks.fastplace.maxblocks" from file "plugins/GoldenEyes/config.yml" to 15
			set yml value "checks.fastbow.enabled" from file "plugins/GoldenEyes/config.yml" to true
			set yml value "checks.waterwalk.enabled" from file "plugins/GoldenEyes/config.yml" to true
			set yml value "checks.autosneak.enabled" from file "plugins/GoldenEyes/config.yml" to true
			set yml value "checks.liquidinteract.enabled" from file "plugins/GoldenEyes/config.yml" to true
			set yml value "checks.flight.enabled" from file "plugins/GoldenEyes/config.yml" to true
			set yml value "checks.antikb.enabled" from file "plugins/GoldenEyes/config.yml" to true
			set yml value "checks.xray.enabled" from file "plugins/GoldenEyes/config.yml" to false
			set yml value "checks.speed.enabled" from file "plugins/GoldenEyes/config.yml" to false
			set yml value "checks.fastladder.enabled" from file "plugins/GoldenEyes/config.yml" to false
			set yml value "checks.badpackets.enabled" from file "plugins/GoldenEyes/config.yml" to false
		if dir "plugins/GoldenEyes/addons" doesn't exist:
			create directory "plugins/GoldenEyes/addons"
		updatePluginData()
	if {_t} is "unknowncmd":
		send "%{CONFIG::prefix}% Invaild Argument. Use ""/goldeneyes help"" for help." to {_p}
	if {_t} is "notify-true":
		set {goldeneyes.notify::%{_p}%} to true
		send "%{CONFIG::prefix}% Set notifications to on!" to {_p}
	if {_t} is "notify-false":
		set {goldeneyes.notify::%{_p}%} to false
		send "%{CONFIG::prefix}% Set notifications to off!" to {_p}
	if {_t} is "help":
		send "&8[&a-=-&8]&7&m------&8[&6GoldenEyes&8]&7&m------&8[&a-=-&8]&r" to {_p}
		send "&8[&a!&8]&6 <suggest command:/goldeneyes reload>/goldeneyes reload&e: Reload" to {_p}
		send "&8[&a!&8]&6 <suggest command:/goldeneyes version>/goldeneyes version&e: Get the version" to {_p}
		send "&8[&a!&8]&6 <suggest command:/goldeneyes notify (boolean)>/goldeneyes notify <true|false>&e: Toggle notifications" to {_p}
		send "&8[&a!&8]&6 <suggest command:/goldeneyes checks>/goldeneyes checks&e: See the Cheat Checks" to {_p}
		send "&8[&a!&8]&6 <suggest command:/goldeneyes help>/goldeneyes help&e: Get Help" to {_p}
		send "&8[&a!&8]&6 <suggest command:/goldeneyes info (player)>/goldeneyes info <player>&e: Get Info" to {_p}
		send "&8[&a!&8]&6 <suggest command:/goldeneyes reset (player) (violation)>/goldeneyes reset <player> <violations>&e: Reset Violations" to {_p}
		send "&8[&a!&8]&6 <suggest command:/goldeneyes git>/goldeneyes (git[hub]|snapshots)" to {_p}
		send "&8[&a!&8]&6 <suggest command:/goldeneyes about>/goldeneyes about" to {_p}
		send "&8[&a-=-&8]&7&m------&8[&6GoldenEyes&8]&7&m------&8[&a-=-&8]&r" to {_p}
	if {_t} is "about":
		send "&6Name&e: {@name}" to {_p}
		send "&6Author&e: MisterBasic" to {_p}
		send "&6Version&e: {@version}" to {_p}
		send "&6Description&e: {@description}" to {_p}
	if {_t} is "addons":
		if getAddons() is not set:
			send "%{CONFIG::prefix}% No Addons Found." to {_p}
		else:
			send "%{CONFIG::prefix}% Addons:%nl% %getAddons()%" to {_p}
# [----------------] #
# [Functions  API ] #
# [----------------] #
function gelog(s: string):
	set {_line} to line count of file "plugins/GoldenEyes/logs/%now%.log"
	set line {_line} in file "plugins/GoldenEyes/logs/%now%.log" to "[%now%] %{_s}%"
function alert(m: text, p: player):
	allowChecks() is true
	log "%{_m}% (Ping: %{_p}'s ping%, IP: %{_p}'s ip%)" to "Goldeneyes/checks.log"
	if difference between {goldeneyes.timeonline.%{_p}%} and now > {@maxtimejoin}:
		loop all players:
			if {goldeneyes.notify::%loop-player%} is true:
				if {_p}'s ping > 300:
					send "%{CONFIG::prefix}% <tooltip:&c&l&nClick to Teleport><cmd:/goldeneyes teleport %{_p}%>%{_m}% &e| Ping:&c %{_p}'s ping%&e" to loop-player
				else:
					send "%{CONFIG::prefix}% <tooltip:&c&l&nClick to Teleport><cmd:/tp %{_p}%>%{_m}% &e| Ping:&a %{_p}'s ping%&e" to loop-player
	send "[{@name}] %{_m}% (Ping: %{_p}'s ping%)" to console
	updatePlayerData({_p})
function registerViolations(p: player, v: text):
	if yml path "violations.%uuid of {_p}%.%{_v}%" in file "plugins/GoldenEyes/playerdata.yml" doesn't exist:
		set yml value "violations.%uuid of {_p}%.%{_v}%" from file "plugins/GoldenEyes/playerdata.yml" to 0
function staffMsg(m: text, sgtcmd: text):
	loop all players:
		loop-player has permission "goldeneyes.notify":
			if {goldeneyes.notify::%loop-player%} is true:
				send "%{CONFIG::prefix}% <suggest command: %{_sgtccmd}%>%{_m}%" to loop-player
	send "[{@name}] %{_m}%" to console
function gekick(m: text, p: player):
	allowChecks() is true
	{goldeneyes.timeonline.%{_p}%} was more than {@maxtimejoin} ago
	kick {_p} due to "%{CONFIG::prefix}% You were disconnected from the server.%nl%%nl%&4Reason: %{_m}%%nl%%nl%&7Please do not do this again!"
	loop all players:
		if loop-player has permission "goldeneyes.notify" or "goldeneyes.notify.kick":
			send "%{CONFIG::prefix}% %{_p}% was kicked from the server. Reason: %{_m}%" to loop-player
	send "[{@name}] %{_p}% was attempted to be kicked from the server. Reason: %{_m}%" to console
function antiVPNHandler(p: player):
	set {_host} to text from "http://legacy.iphub.info/api.php?ip=%ip of {_p}%&showtype=4"
	set {_invaild.asn::*} to yml list "checks.antiVPN.blockedhosts" from file "plugins/GoldenEyes/config.yml"
	set {hostinfo::*} to {_host} split at ",""asn"":"
	set {_host} to {_hostinfo::2}
	replace all "}" with "" in {_host}
	if {_info} contains {_invaild.asn::*}:
		log "%{_p}% tried to use a VPN [%ip of {_p}%]" to "GoldenEyes/checks.log"
		gekick("VPN", {_p})
function registerViolationsHandler(p: player):
	registerViolations({_p}, "autoclicker")
	registerViolations({_p}, "reach")
	registerViolations({_p}, "fastplace")
	registerViolations({_p}, "fastbow")
	registerViolations({_p}, "waterwalk")
	registerViolations({_p}, "autosneak")
	registerViolations({_p}, "liquidinteract")
	registerViolations({_p}, "flight")
	registerViolations({_p}, "antikb")
	registerViolations({_p}, "xray")
	registerViolations({_p}, "speed")
	registerViolations({_p}, "fastladder")
	registerViolations({_p}, "badpackets")


function allowChecks() :: boolean:
	if {goldeneyes.delay} is set:
		if difference between {goldeneyes.delay} and now > 2 seconds:
			return true
		else:
			return false
	else:
		set {goldeneyes.delay} to now
# API
function updatePlayerData(p: player):
	set {_uuid} to uuid of {_p}
	set yml value "violations.%uuid of {_p}%.autoclicker" from file "plugins/GoldenEyes/playerdata.yml" to {CONFIG::violations.%{_uuid}%.autoclicker}
	set yml value "violations.%uuid of {_p}%.reach" from file "plugins/GoldenEyes/playerdata.yml" to {CONFIG::violations.%{_uuid}%.reach}
	set yml value "violations.%uuid of {_p}%.fastplace" from file "plugins/GoldenEyes/playerdata.yml" to {CONFIG::violations.%{_uuid}%.fastplace}
	set yml value "violations.%uuid of {_p}%.fastbow" from file "plugins/GoldenEyes/playerdata.yml" to {CONFIG::violations.%{_uuid}%.fastbow}
	set yml value "violations.%uuid of {_p}%.waterwalk" from file "plugins/GoldenEyes/playerdata.yml" to {CONFIG::violations.%{_uuid}%.waterwalk}
	set yml value "violations.%uuid of {_p}%.autosneak" from file "plugins/GoldenEyes/playerdata.yml" to {CONFIG::violations.%{_uuid}%.autosneak}
	set yml value "violations.%uuid of {_p}%.liquidinteract" from file "plugins/GoldenEyes/playerdata.yml" to {CONFIG::violations.%{_uuid}%.liquidinteract}
	set yml value "violations.%uuid of {_p}%.flight" from file "plugins/GoldenEyes/playerdata.yml" to {CONFIG::violations.%{_uuid}%.flight} 
	set yml value "violations.%uuid of {_p}%.antikb" from file "plugins/GoldenEyes/playerdata.yml" to {CONFIG::violations.%{_uuid}%.antikb}
	set yml value "violations.%uuid of {_p}%.xray" from file "plugins/GoldenEyes/playerdata.yml" to {CONFIG::violations.%{_uuid}%.xray}
	set yml value "violations.%uuid of {_p}%.speed" from file "plugins/GoldenEyes/playerdata.yml" to {CONFIG::violations.%{_uuid}%.speed}
	set yml value "violations.%uuid of {_p}%.nuker" from file "plugins/GoldenEyes/playerdata.yml" to {CONFIG::violations.%{_uuid}%.nuker}
	set yml value "violations.%uuid of {_p}%.badpackets" from file "plugins/GoldenEyes/playerdata.yml" to {CONFIG::violations.%{_uuid}%.badpackets}
function updatePluginData(a: int = 1):
	set {CONFIG::checks.autoclicker.enabled} to yml value "checks.autoclicker.enabled" from file "plugins/GoldenEyes/config.yml"
	set {CONFIG::checks.reach.enabled} to yml value "checks.reach.enabled" from file "plugins/GoldenEyes/config.yml"
	set {CONFIG::checks.fastplace.enabled} to yml value "checks.fastplace.enabled" from file "plugins/GoldenEyes/config.yml"
	set {CONFIG::checks.fastbow.enabled} to yml value "checks.fastbow.enabled" from file "plugins/GoldenEyes/config.yml"
	set {CONFIG::checks.waterwalk.enabled} to yml value "checks.waterwalk.enabled" from file "plugins/GoldenEyes/config.yml"
	set {CONFIG::checks.autosneak.enabled} to yml value "checks.autosneak.enabled" from file "plugins/GoldenEyes/config.yml"
	set {CONFIG::checks.liquidinteract.enabled} to yml value "checks.liquidinteract.enabled" from file "plugins/GoldenEyes/config.yml"
	set {CONFIG::checks.flight.enabled} to yml value "checks.flight.enabled" from file "plugins/GoldenEyes/config.yml"
	set {CONFIG::checks.antikb.enabled} to yml value "checks.antikb.enabled" from file "plugins/GoldenEyes/config.yml"
	set {CONFIG::checks.xray.enabled} to yml value "checks.xray.enabled" from file "plugins/GoldenEyes/config.yml"
	set {CONFIG::checks.speed.enabled} to yml value "checks.speed.enabled" from file "plugins/GoldenEyes/config.yml"
	set {CONFIG::checks.badpackets.enabled} to yml value "checks.badpackets.enabled" from file "plugins/GoldenEyes/config.yml"
	set {CONFIG::options.actionbar-message} to yml value "options.actionbar-message" from file "plugins/GoldenEyes/config.yml"

# Advanced API
# [-=-=-=-=-=-=-=-=-=-]
# [     AutoUpdate    ]
# [-=-=-=-=-=-=-=-=-=-]
# Send update message
function autoUpdate(website: string):
	send "§1>§9>§b>" to console
	send "[{@name}] You are currently running an outdated version." to console
	send "[{@name}] Please update to a new version: %{_website}%" to console
	send "§1>§9>§b>" to console
# AutoUpdate Handler
function autoUpdateHandler():
	if "{@version}" ends with "_DEV":
		if text from "{@devversion-pastebin}" is not "{@version}":
			set {_website} to "{@github}"
			autoUpdate("%{_website}%")
	else:
		if text from "{@version-pastebin}" is not "{@version}":
			set {_website} to "https://www.spigotmc.org/resources/sk-goldeneyes-anticheat.54638/"
			autoUpdate("%{_website}%")
# [-=-=-=-=-=-=-=-=-=-]
# [    ChatManager    ]
# [-=-=-=-=-=-=-=-=-=-]
function muteChat(r: text):
	set {goldeneyes.chatmuted} to {_r}
function chatIsMuted() :: boolean:
	if {goldeneyes.chatmuted} is set:
		return true
	else:
		return false
function getChatMuteReason() :: text:
	return {goldeneyes.chatmuted}
function unmuteChat():
	clear {goldeneyes.chatmuted}



# [-=-=-=-=-=-=-=-=-=-]
# [       Addons      ]
# [-=-=-=-=-=-=-=-=-=-]

function loadAddon(s: string):
	send "<red>Remember, do not put a .sk at the end of the selected directory to file!" to console
	skutil copy file "plugins/GoldenEyes/addons/%{_s}%.sk" to "plugins/Skript/scripts/addons/"
	if file "plugins/Skript/scripts/addons/%{_s}%.sk" does not exist:
		send "<red>Error: &cFile addons/%{_s}%.sk could not load into the server. File does not exist or was not found by the computer." to console
		stop
	wait a second
	make console execute "/skript reload addons/%{_s}%.sk"
	wait a second
	skutil delete file "plugins/Skript/scripts/addons/%{_s}%.sk"
		

function unloadAddon(s: string):
	if {_s} doesn't end with ".sk":
		move file "plugins/GoldenEyes/addons/%{_s}%.sk" to "plugins/Skript/scripts/addons/%{_s}%.sk"
	else:
		move file "plugins/GoldenEyes/addons/%{_s}%" to "plugins/GoldenEyes/addons/%{_s}%"
function getAddons(a: int = 0) :: strings:
	set {_dir} to "plugins/GoldenEyes/addons"
	set {_return::*} to files in dir {_dir}
	if {_return::*} is null:
		clear {_return::*}
	return {_return::*}
# End
